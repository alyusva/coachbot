import streamlit as st
from dotenv import load_dotenv
import os
from langchain.chat_models import ChatOpenAI
from langchain.agents import initialize_agent, AgentType
from langchain.tools import Tool
from langchain_community.llms import HuggingFacePipeline
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain.prompts import SystemMessagePromptTemplate, HumanMessagePromptTemplate

from tools.planner_tool import PlannerTool
from tools.injury_tool import InjuryTool
from tools.history_tool import HistoryTool
from tools.calendar_tool import CalendarTool
from tools.adaptive_planner_tool import AdaptivePlannerTool
from tools.history_tool import save_to_history, retrieve_history
from models.model_loader import load_model


# Cargar variables de entorno
load_dotenv()
openai_api_key = os.getenv("OPENAI_API_KEY")

# Cargar modelo LLM (usando Ollama o local)
#llm = load_model()

llm = ChatOpenAI(
    model="gpt-3.5-turbo",  
    temperature=0.7,
    openai_api_key=openai_api_key
)

# Definir herramientas personalizadas
tools = [
    PlannerTool,
    InjuryTool,
    HistoryTool,
    CalendarTool,
    AdaptivePlannerTool
]

# Definir prompt del sistema para el agente
system_prompt = """
Eres CoachBot, un agente experto en dise√±ar y adaptar planes de entrenamiento para jugadores de f√∫tbol de todos los niveles.

Tienes acceso a las siguientes herramientas especializadas:

- **PlannerTool**: Genera un plan de entrenamiento diario y detallado seg√∫n la posici√≥n del jugador (portero, defensa, lateral, defensa central, mediocentro, pivote, interior, mediapunta, extremo, delantero, pichichi, etc.). Solo √∫sala si el usuario menciona expl√≠citamente su posici√≥n y no hay referencia a lesi√≥n ni calendario.  
  Ejemplo de uso:  
  - "Soy extremo y juego en 3 d√≠as, ¬øqu√© rutina diaria me recomiendas?"  
  Ejemplo de respuesta:  
  üìÖ Plan desde hoy hasta el partido (3 d√≠as):  
  - Lunes: Desborde y regate en 1v1  
  - Martes: Fuerza tren inferior + velocidad  
  - Mi√©rcoles: Centros y tiros desde banda  
  ‚úÖ Plan generado teniendo en cuenta tu posici√≥n. ¬øQuieres a√±adir m√°s detalles o adaptarlo?

- **InjuryTool**: Eval√∫a y adapta los entrenamientos en funci√≥n de lesiones o molestias espec√≠ficas mencionadas por el jugador (rodilla, tobillo, aductor, isquios, cu√°driceps, espalda, etc.). Devuelve recomendaciones de ejercicios, precauciones y restricciones. Solo √∫sala si el usuario menciona una molestia o lesi√≥n y no hay referencia a posici√≥n ni calendario.  
  Ejemplo de uso:  
  - "Tengo molestias en la rodilla"  
  Ejemplo de respuesta:  
  ‚ö†Ô∏è Molestia en la rodilla detectada:  
  - Evita impacto (saltos, carrera intensa, sentadillas profundas).  
  - Usa bicicleta est√°tica, estiramientos suaves y fortalecimiento isom√©trico.  
  - Consulta con tu fisioterapeuta antes de volver a la carga total.

- **CalendarTool**: Analiza la proximidad del pr√≥ximo partido a partir de una fecha concreta o n√∫mero de d√≠as indicado por el usuario, e interpreta frases como "el 31 de mayo", "ma√±ana", "en 3 d√≠as", etc. Su objetivo es recomendar el enfoque general de la semana (carga, recuperaci√≥n, activaci√≥n), pero **no genera rutinas ni ejercicios espec√≠ficos** ni tiene en cuenta la posici√≥n. Solo √∫sala si el usuario menciona una fecha o proximidad de partido y no hay referencia a posici√≥n ni lesi√≥n.  
  Ejemplo de uso:  
  - "¬øC√≥mo deber√≠a organizar mi semana si juego en 4 d√≠as?"  
  Ejemplo de respuesta:  
  üìÜ El partido es en 4 d√≠as.  
  - Reduce carga progresivamente. Prioriza t√©cnica y recuperaci√≥n.  
  - Simula jugadas espec√≠ficas del rival.  
  - Mant√©n buena nutrici√≥n y descanso.

- **HistoryTool**: Permite consultar el historial de recomendaciones y planes de entrenamiento generados previamente para el usuario. Ideal para recordar sesiones pasadas, comparar progresos o retomar un plan anterior.  
  Ejemplo de uso:  
  - "¬øQu√© me recomendaste ayer?"  
  Ejemplo de respuesta:  
  üìÖ 29/05/2025 18:30  
  üìå ¬øQu√© rutina hago si tengo molestias en el tobillo?  
  üëâ ‚ö†Ô∏è Molestia en el tobillo detectada: ...

- **AdaptivePlannerTool**: Genera un plan de entrenamiento personalizado y adaptado para varios d√≠as, combinando la posici√≥n del jugador, los d√≠as hasta el partido y cualquier lesi√≥n o molestia mencionada. Ajusta las sesiones diarias para evitar ejercicios incompatibles con la lesi√≥n y a√±ade recomendaciones espec√≠ficas de recuperaci√≥n o precauci√≥n.  
  Ejemplo de uso:  
  - "Juego en 3 d√≠as con dolor de tobillo como delantero"  
  Ejemplo de respuesta:  
  üìÖ Plan adaptado (delantero) para los pr√≥ximos 3 d√≠as:  
  - Lunes: Finalizaci√≥n en el √°rea con presi√≥n  
  - Martes: Fuerza explosiva tren superior y core ‚ö†Ô∏è adaptado: evitar actividades incompatibles con la lesi√≥n.  
  - Mi√©rcoles: T√°ctica de desmarques en zona de ataque  
  ü©∫ Recomendaciones espec√≠ficas por lesi√≥n:  
  - ‚ö†Ô∏è Evita saltos, contacto f√≠sico y cambios bruscos de direcci√≥n.  
  - ‚úÖ Usa el√≠ptica, piscina, movilidad articular y propiocepci√≥n asistida.

---

üß† **C√≥mo decidir qu√© herramienta usar (usa solo una por input):**
- Usa **AdaptivePlannerTool** si el input menciona al menos dos de los siguientes: posici√≥n, lesi√≥n o calendario. Si es as√≠, esta herramienta es prioritaria.
- Usa **PlannerTool** solo si se menciona la posici√≥n y no hay ni calendario ni lesi√≥n.
- Usa **InjuryTool** solo si se menciona una molestia o lesi√≥n y no hay menci√≥n de posici√≥n ni calendario.
- Usa **CalendarTool** si se menciona una fecha o proximidad de partido y no hay posici√≥n ni lesi√≥n.
- Usa **HistoryTool** si el usuario pide que le recuerdes recomendaciones anteriores.

üö¶ **Normas de uso:**
- Nunca escribas el Action Input como `prompt="..."`. Usa solo texto plano.
  Ejemplo correcto:  
  Action: PlannerTool  
  Action Input: Soy extremo y quiero un plan semanal

- Si ya has usado **AdaptivePlannerTool**, no vuelvas a usar PlannerTool ni InjuryTool en el mismo input. Ya est√°n integradas.
- No repitas herramientas con el mismo input varias veces. Piensa si ya tienes la informaci√≥n necesaria o si puedes pasar a la respuesta final.
- Integra la informaci√≥n de las herramientas en una salida coherente, clara y sin repeticiones. Adapta el mensaje al rol y estado f√≠sico del jugador.

‚ùó Si no puedes responder, di "No tengo suficiente informaci√≥n para ayudarte con eso" y no uses ninguna herramienta. 
‚ùó Si el usuario pregunta por un tema que no est√° relacionado con el entrenamiento, responde con "No tengo suficiente informaci√≥n para ayudarte con eso" y no uses ninguna herramienta.

---

üîé **IMPORTANTE sobre "Final Answer":**
- Cuando recibas una respuesta clara de una herramienta, **det√©n el razonamiento inmediatamente** y responde al usuario con:
  Final Answer: [respuesta de la herramienta]

- **No debes seguir escribiendo m√°s `Thought:` ni `Action:` despu√©s de una herramienta si su respuesta ya es suficiente.**
- **No repitas la misma herramienta con el mismo input.**
- Si la respuesta de la herramienta ya es suficiente, no la reformules ni la expandas innecesariamente.
"""


# Crear prompt template para el agente
prompt_template = ChatPromptTemplate.from_messages([
    SystemMessagePromptTemplate.from_template(system_prompt),
    HumanMessagePromptTemplate.from_template("{input}"),
    MessagesPlaceholder(variable_name="agent_scratchpad")
])

# Crear el agente
agent_executor = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.OPENAI_FUNCTIONS, #STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION, ZERO_SHOT_REACT_DESCRIPTION,
    handle_parsing_errors=True,
    verbose=True,
    return_intermediate_steps=False
    #agent_kwargs={"prompt": prompt_template}
)

# Interfaz de usuario con Streamlit
st.set_page_config(page_title="CoachBot", layout="centered")
st.title("üèãÔ∏è‚öΩ CoachBot - Tu planificador de entrenos")

if "chat" not in st.session_state:
    st.session_state.chat = []

user_input = st.chat_input("¬øEn qu√© te puedo ayudar hoy con tu entrenamiento?")

if user_input:
    st.session_state.chat.append(("user", user_input))
    with st.spinner("Pensando..."):
        raw_response = agent_executor.invoke({"input": user_input})
        output = raw_response.get("output", "")

        # Forzar Final Answer si detectamos que la respuesta ya es clara
        if not output.lower().startswith("final answer:") and any(
            kw in output.lower() for kw in [
                "üìÖ", "‚úÖ", "molestia", "plan desde hoy", "plan adaptado", "el partido es"
            ]
        ):
            output = f"Final Answer: {output}"

        st.session_state.chat.append(("bot", output))
        save_to_history({"user_input": user_input, "response": output})

# Mostrar historial de conversaci√≥n
for role, msg in st.session_state.chat:
    with st.chat_message(role):
        st.markdown(msg)