import dateparser
from datetime import datetime

def analyze_calendar(prompt: str) -> str:
    """
    Analiza la fecha del pr√≥ximo partido e indica recomendaciones seg√∫n la carga
    y proximidad. Interpreta fechas como 'el 31 de mayo', 'ma√±ana', 'en 3 d√≠as', etc.
    """
    prompt = prompt.lower()
    fecha_partido = dateparser.parse(prompt, languages=["es"])

    if not fecha_partido:
        return "‚ö†Ô∏è No se ha podido interpretar ninguna fecha. Intenta usar un formato como 'partido el 31 de mayo' o 'juego en 3 d√≠as'."

    hoy = datetime.now()
    dias_restantes = (fecha_partido.date() - hoy.date()).days

    if dias_restantes < 0:
        return f"üìÜ El partido fue hace {abs(dias_restantes)} d√≠as. Revisa tus registros anteriores o prepara recuperaci√≥n."

    if dias_restantes == 0:
        return (
            "üìÜ ¬°El partido es hoy!\n"
            "- Enf√≥cate en activaci√≥n ligera, hidrataci√≥n y mentalizaci√≥n t√°ctica.\n"
            "- Evita cargas pesadas. Come ligero pero energ√©tico.\n"
            "- Visualiza tus acciones clave en el campo."
        )

    if dias_restantes == 1:
        return (
            "üìÜ El partido es ma√±ana.\n"
            "- Realiza una sesi√≥n muy ligera: movilidad + activaci√≥n corta.\n"
            "- Cena rica en carbohidratos. Duerme bien.\n"
            "- Revisi√≥n t√°ctica individual y colectiva."
        )

    if dias_restantes <= 3:
        return (
            f"üìÜ El partido es en {dias_restantes} d√≠as.\n"
            "- Reduce carga progresivamente. Prioriza t√©cnica y recuperaci√≥n.\n"
            "- Simula jugadas espec√≠ficas del rival.\n"
            "- Mant√©n buena nutrici√≥n y descanso."
        )

    if dias_restantes <= 7:
        return (
            f"üìÜ Partido en {dias_restantes} d√≠as.\n"
            "- Semana equilibrada: fuerza, t√©cnica, t√°ctica.\n"
            "- Control de fatiga acumulada. Un d√≠a de descanso activo recomendado.\n"
            "- Mant√©n rutina y buen ritmo de sue√±o."
        )

    return (
        f"üìÜ Partido en {dias_restantes} d√≠as.\n"
        "- Etapa de construcci√≥n. Prioriza fuerza, resistencia y carga t√©cnica alta.\n"
        "- Haz evaluaciones f√≠sicas y trabaja en tus debilidades.\n"
        "- Semana pr√≥xima comienza descarga progresiva."
    )


# Tool integration
from langchain.tools import Tool

CalendarTool = Tool(
    name="CalendarTool",
    func=analyze_calendar,
    description=(
        "Analiza la proximidad del pr√≥ximo partido a partir de una fecha concreta o n√∫mero de d√≠as indicado por el usuario, "
        "e interpreta frases como 'el 31 de mayo', 'ma√±ana', 'en 3 d√≠as', etc. "
        "Su objetivo es recomendar el enfoque general de la semana (carga, recuperaci√≥n, activaci√≥n), "
        "pero **no genera rutinas ni ejercicios espec√≠ficos**. "
        "Ideal para planificar la distribuci√≥n de la carga y el descanso seg√∫n la fecha del partido, "
        "sin tener en cuenta la posici√≥n ni detalles personalizados.\n\n"
        "Ejemplo de uso: '¬øC√≥mo deber√≠a organizar mi semana si juego en 4 d√≠as?', 'Tengo partido el 28 de mayo', 'Mi pr√≥ximo partido es ma√±ana'.\n"
        "Ejemplo de respuesta:\n"
        "üìÜ El partido es en 4 d√≠as.\n"
        "- Reduce carga progresivamente. Prioriza t√©cnica y recuperaci√≥n.\n"
        "- Simula jugadas espec√≠ficas del rival.\n"
        "- Mant√©n buena nutrici√≥n y descanso."
    )
)